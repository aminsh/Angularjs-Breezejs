
    function set (metadata, serviceName) {
        var store = new breeze.MetadataStore();
        var identity = breeze.AutoGeneratedKeyType.Identity;
        var breezehelper = new breeze.config.MetadataHelper('Model');
        var addTypeToStore = breezehelper.addTypeToStore.bind(breezehelper);

        breezehelper.addDataService(store, serviceName);

        metadata.foreach(function (cmd) {
            var et = {
                shortName: cmd.Name,
                autoGeneratedKeyType: identity,
                dataProperties: getProperties(cmd.Properties)
            };

            var navigationProps = getNavigationProperty(cmd.Properties);
            if (!isNullOrEmpty(navigationProps))
                et.navigationProperties = navigationProps;

            addTypeToStore(store, et);

            store.registerEntityTypeCtor(
                cmd.Name,
                function() {
                    this.hasError = false;
                    this.errors = [];
                },
                function(entity) {
                    entity.entityAspect.validationErrorsChanged.subscribe(onChange);


                    function onChange(vld) {
                        var entity = vld.entity;
                        var errors = entity.entityAspect.getValidationErrors();
                        entity.errors.removeAll();

                        errors.forEach(function (error) {
                            entity.errors.push(error);
                        });

                        entity.hasError = entity.errors.length > 0;
                    }
                }
            );
        });

        return store;
    }

    var getProperties = function (props) {
        var properties = {};
        props.foreach(function (prop) {
            if (prop.Type.startsWith('Array'))
                return;

            var attr = {
                type: mapDatetype(prop.Type),
            };

            if (!isNullOrEmpty(attr.type))
                attr.defaultValue = attr.type.defaultValue;

            if (prop.IsKey)
                attr.isPartOfKey = true;

            properties[prop.Name] = attr;
        });

        return properties;
    };

    var getNavigationProperty = function (props) {
        if (!props.any(function (prop) {
            return prop.Type.startsWith('Array');
        })) return null;

        var arrayprops = props.filter(function (prop) {
            return prop.Type.startsWith('Array');
        });

        var navigatoinProps = {};

        arrayprops.foreach(function (prop) {
            navigatoinProps[props.Name] = {
                entityTypeName: prop.Type.split(';')[1],
                isScalar: false
            };
        });

        return navigatoinProps;
    };

    var mapDatetype = function (type) {
        var dt = breeze.DataType;
        var typeName = type.toLowerCase();

        if (typeName.contains('int'))
            return dt.Int32;
        if (typeName.contains('guid'))
            return dt.Guid;
        if (typeName.contains('string'))
            return dt.String;
        if (typeName.contains('date'))
            return dt.DateTime;
        if (typeName.contains('bool'))
            return dt.Boolean;
        if (typeName.contains('double'))
            return dt.Double;
    };

